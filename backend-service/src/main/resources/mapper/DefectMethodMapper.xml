<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pray.mapper.DefectMethodMapper">

    <resultMap id="BaseResultMap" type="com.pray.entity.DefectMethod">
        <result property="dmId" column="dm_id" jdbcType="INTEGER"/>
        <result property="defectName" column="defect_name" jdbcType="VARCHAR"/>
        <result property="methodName" column="method_name" jdbcType="VARCHAR"/>
        <result property="stdClassifiedId" column="std_classified_id" jdbcType="INTEGER"/>
        <result property="runScript" column="run_script" jdbcType="VARCHAR"/>
        <result property="runArgs" column="run_args" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Base_Column_List">
        dm_id
        ,defect_name,method_name,
        std_classified_id,run_script,run_args
    </sql>

    <!--加入ResultMap的好处是可以将实体Bean和数据库的字段进行映射对应-->
    <resultMap id="DefectResultItemMap" type="com.pray.entity.DefectMethod">
        <result column="DM_ID" property="dmId" jdbcType="DECIMAL"/>
        <result column="DEFECT_NAME" property="defectName" jdbcType="VARCHAR"/>
        <result column="METHOD_NAME" property="methodName" jdbcType="VARCHAR"/>
        <result column="STD_CLASSIFIED_ID" property="stdClassifiedId" jdbcType="DECIMAL"/>
        <result column="RUN_SCRIPT" property="runScript" jdbcType="VARCHAR"/>
        <result column="RUN_ARGS" property="runArgs" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="getQcMethodItems" resultMap="DefectResultItemMap">
        select dm_id,
               defect_name,
               method_name,
               std_classified_id,
               run_script,
               run_args
        from tb_defect_method;
    </select>

    <!--批量插入数据-->
    <!--批量插入数据还可以用于插入的数据中含有list元素的情况-->
    <!--parameterType="java.util.List" useGeneratedKeys="true" keyProperty="dm_id"-->
    <!--
        foreach包含属性讲解：
        open：整个循环内容开头的字符串。
        close：整个循环内容结尾的字符串。
        separator：每次循环的分隔符。
        item：从迭代对象中取出的每一个值。
        index：如果参数为集合或者数组，该值为当前索引值，如果参数为Map类型时，该值为Map的key。
        collection：要迭代循环的属性名。
    -->
    <insert id="batchInsertItems">
        INSERT INTO tb_defect_method(dm_id,defect_name,method_name,
        std_classified_id,run_script,run_args)
        VALUES
        <foreach collection="methodList" item="item" separator="," open='(' close=')'>
            (#{item.dm_id},#{item.defect_name},#{item.method_name},#{item.std_classified_id},
            #{item.run_script},#{item.run_args})
        </foreach>
    </insert>

    <select id="selectForEachConditionally">
        select
        /*使用定义好的公共字段*/
        <include refid="Base_Column_List"/>
        from tb_defect_method
        where 1=1
        <if test="runScript != null">
            and run_script = #{runScript}
        </if>
        and dm_id = #{dm_id}
    </select>

    <!--
    int updateByMap(@Param("userMap") Map<String, Object> map);
    -->
    <update id="updateByMap">
        UPDATE sys_user
        SET
        <foreach collection="userMap" item="val" index="key" separator=",">
            ${key} = #{val}
        </foreach>
        WHERE id = #{userMap.id}
    </update>




</mapper>
